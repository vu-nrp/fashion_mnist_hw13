// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert REQUANTIZATION == "FP32" or not REQUANTIZATION
$assert DATATYPE in ["QD8", "QS8", "QC4", "QC8"]
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/gemm.h>
#include <xnnpack/intrinsics-polyfill.h>
#include <xnnpack/math.h>
#include <xnnpack/unaligned.h>
$if PREFETCH:
  #include <xnnpack/prefetch.h>


$DATATYPE_SPEC = {"QC8": "qs8_qc8w", "QD8": "qd8_f32_qc8w", "QS8": "qs8", "QU8": "qu8", "QC4": "qd8_f32_qc4w"}[DATATYPE]
$REQUANTIZATION_SPEC = "" if DATATYPE in ["QD8", "QC4"] else "_" + REQUANTIZATION.lower()
$PARAMS_STRUCT = REQUANTIZATION.lower() + "_avxvnni" if REQUANTIZATION else "avxvnni"
$PARAMS_UNION = {"QC8": "xnn_qs8_qc8w_conv_minmax_params", "QD8": "xnn_f32_minmax_params", "QS8": "xnn_qs8_conv_minmax_params", "QU8": "xnn_qu8_conv_minmax_params", "QC4": "xnn_f32_qc4w_minmax_params"}[DATATYPE]
$XINT8_T = "uint8_t" if DATATYPE == "QU8" else "int8_t"
$OUT_T = "float" if DATATYPE in ["QD8", "QC4"] else XINT8_T
$_MM_PACKXS_EPI16 = "_mm_packus_epi16" if DATATYPE == "QU8" else "_mm_packs_epi16"
$_MM_MAX_EPX8 = "_mm_max_epu8" if DATATYPE == "QU8" else "_mm_max_epi8"
$_MM256_CVTXEPI32_EPI8 = "_mm256_cvtusepi32_epi8" if DATATYPE == "QU8" else "_mm256_cvtsepi32_epi8"
$_MM256_DPBUSD_EPI32 = "_mm256_dpbusd_avx_epi32" if AVX else "_mm256_dpbusd_epi32"
$ISA = "avxvnni" if AVX else "avx512vnnigfni" if GFNI else "avx512vnni"
void xnn_${DATATYPE_SPEC}_gemm_minmax${REQUANTIZATION_SPEC}_ukernel_${MR}x8c8__${ISA}${"_prfm" if PREFETCH else ""}(
    size_t mr,
    size_t nc,
    size_t kc,
    const ${XINT8_T}* restrict a,
    size_t a_stride,
    const void* restrict w,
    ${OUT_T}* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    $if DATATYPE in ["QD8", "QC4"]:
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)],
      const struct xnn_qd8_quantization_params quantization_params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
    $else:
      const union ${PARAMS_UNION} params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(${XINT8_T}) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  kc = round_up_po2(kc, 8 * sizeof(int8_t));
  const ${XINT8_T}* a0 = a;
  ${OUT_T}* c0 = c;
  $for M in range(1, MR):
    const ${XINT8_T}* a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M-1} + a_stride);
    ${OUT_T}* c${M} = (${OUT_T}*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }

  $if DATATYPE in ["QD8", "QC4"]:
    $for M in range(MR):
      const __m256i vinput_zero_point${M} = _mm256_set1_epi32((int) quantization_params[${M}].zero_point + 128);
    const __m256 voutput_min = _mm256_set1_ps(params->avxvnni.min);
    const __m256 voutput_max = _mm256_set1_ps(params->avxvnni.max);
    const __m256i vsign_mask = _mm256_set1_epi8(params->avxvnni.sign_mask);  // 0x80
    $if DATATYPE == "QC4":
      const __m256i vvalue_mask = _mm256_set1_epi8(params->avxvnni.mask);  // 0xF0
      $if GFNI:
        const __m256i vshl4 = _mm256_set1_epi64x(params->avxvnni.gfni_shl4);  // 0x01020408
  $else:
    const __m256i vsign_mask =_mm256_set1_epi8(params->${PARAMS_STRUCT}.sign_mask);  // 0x80
    $if DATATYPE != "QC8":
      const __m256 vscale = _mm256_load_ps(params->${PARAMS_STRUCT}.scale);
    const __m256 voutput_max_less_zero_point = _mm256_set1_ps(params->${PARAMS_STRUCT}.output_max_less_zero_point);
    const __m256i voutput_zero_point = _mm256_set1_epi32(params->${PARAMS_STRUCT}.output_zero_point);
    const __m128i voutput_min = _mm_load_si128((const __m128i*) params->${PARAMS_STRUCT}.output_min);  // *** check params
    $if DATATYPE == "QU8":
      const __m256i vb_zero_point = _mm256_load_si256(params->${PARAMS_STRUCT}.kernel_zero_point);
  do {
    $if DATATYPE in ["QD8", "QC4"]:
      const __m256i vksum0123456789ABCDEF = _mm256_load_si256(w);
      $for M in range(MR):
        __m256i vsum${M}x01234567 = _mm256_mullo_epi32(vksum0123456789ABCDEF, vinput_zero_point${M});
        __m256i vacc${M}x0123 = _mm256_cvtepu32_epi64(_mm256_extracti128_si256(vsum${M}x01234567, 0));
        __m256i vacc${M}x4567 = _mm256_cvtepu32_epi64(_mm256_extracti128_si256(vsum${M}x01234567, 1));
    $else:
      __m256i vacc0x0123 = _mm256_cvtepu32_epi64(_mm_load_si128((const __m128i*) w));
      __m256i vacc0x4567 = _mm256_cvtepu32_epi64(_mm_load_si128((const __m128i*) ((const int32_t*) w + 4)));
      $for M in range(1, MR):
        __m256i vacc${M}x0123 = vacc0x0123;
        __m256i vacc${M}x4567 = vacc0x4567;
    $if MR < 3:
      $for M in range(MR):
        __m256i vacc1x${M}x0123 = _mm256_setzero_si256();
        __m256i vacc1x${M}x4567 = _mm256_setzero_si256();
    w = (const int32_t*) w + 8;

    size_t k = kc;
    while (k >= 16 * sizeof(int8_t)) {
      $for M in range(MR):
        const __m256i va${M}x01234567 = _mm256_xor_si256(_mm256_set1_epi64x((int64_t) unaligned_load_u64(a${M})), vsign_mask);
        const __m256i va${M}x89ABCDEF = _mm256_xor_si256(_mm256_set1_epi64x((int64_t) unaligned_load_u64(a${M} + 8)), vsign_mask);
        a${M} += 16;

      $if DATATYPE == "QC4":
        const __m256i vbb01234567x01234567 = _mm256_load_si256(w);
        const __m256i vbb89ABCDEFx01234567 = _mm256_load_si256((const __m256i*) ((const ${XINT8_T}*) w + 32));
        $if GFNI:
          const __m256i vb01234567x0123 = _mm256_gf2p8affine_epi64_epi8(vbb01234567x01234567, vshl4, 0);
          const __m256i vb89ABCDEFx0123 = _mm256_gf2p8affine_epi64_epi8(vbb89ABCDEFx01234567, vshl4, 0);
          const __m256i vb01234567x4567 = _mm256_and_si256(vbb01234567x01234567, vvalue_mask);
          const __m256i vb89ABCDEFx4567 = _mm256_and_si256(vbb89ABCDEFx01234567, vvalue_mask);
        $else:
          const __m256i vbs01234567x0123 = _mm256_slli_epi32(vbb01234567x01234567, 4);
          const __m256i vbs89ABCDEFx0123 = _mm256_slli_epi32(vbb89ABCDEFx01234567, 4);
          const __m256i vb01234567x4567 = _mm256_and_si256(vbb01234567x01234567, vvalue_mask);
          const __m256i vb89ABCDEFx4567 = _mm256_and_si256(vbb89ABCDEFx01234567, vvalue_mask);
          const __m256i vb01234567x0123 = _mm256_and_si256(vbs01234567x0123, vvalue_mask);
          const __m256i vb89ABCDEFx0123 = _mm256_and_si256(vbs89ABCDEFx0123, vvalue_mask);
      $else:
        const __m256i vb01234567x0123 = _mm256_load_si256(w);
        const __m256i vb89ABCDEFx0123 = _mm256_load_si256((const __m256i*) ((const ${XINT8_T}*) w + 32));
        const __m256i vb01234567x4567 = _mm256_load_si256((const __m256i*) ((const ${XINT8_T}*) w + 64));
        const __m256i vb89ABCDEFx4567 = _mm256_load_si256((const __m256i*) ((const ${XINT8_T}*) w + 96));
        $if PREFETCH:
          xnn_prefetch_to_l1((const ${XINT8_T}*) w + 896);

      $for M in range(MR):
        vacc${M}x0123 = ${_MM256_DPBUSD_EPI32}(vacc${M}x0123, va${M}x01234567, vb01234567x0123);
        vacc${M}x4567 = ${_MM256_DPBUSD_EPI32}(vacc${M}x4567, va${M}x01234567, vb89ABCDEFx0123);
      $if PREFETCH:
        xnn_prefetch_to_l1((const ${XINT8_T}*) w + 960);
      $for M in range(MR):
        $if MR < 3:
          vacc1x${M}x0123 = ${_MM256_DPBUSD_EPI32}(vacc1x${M}x0123, va${M}x89ABCDEF, vb01234567x4567);
          vacc1x${M}x4567 = ${_MM256_DPBUSD_EPI32}(vacc1x${M}x4567, va${M}x89ABCDEF, vb89ABCDEFx4567);
        $else:
          vacc${M}x0123 = ${_MM256_DPBUSD_EPI32}(vacc${M}x0123, va${M}x89ABCDEF, vb01234567x4567);
          vacc${M}x4567 = ${_MM256_DPBUSD_EPI32}(vacc${M}x4567, va${M}x89ABCDEF, vb89ABCDEFx4567);

      $if DATATYPE == "QC4":
        w = (const ${XINT8_T}*) w + 64;
      $else:
        w = (const ${XINT8_T}*) w + 128;
      k -= 16 * sizeof(${XINT8_T});
    }

    if (k != 0) {
      $for M in range(MR):
        const __m256i va${M}x01234567 = _mm256_xor_si256(_mm256_set1_epi64x((int64_t) unaligned_load_u64(a${M})), vsign_mask);
        a${M} += 8;

      $if DATATYPE == "QC4":
        const __m256i vbb01234567x01234567 = _mm256_load_si256(w);
        const __m256i vbb89ABCDEFx01234567 = _mm256_load_si256((const __m256i*) ((const ${XINT8_T}*) w + 32));
        $if GFNI:
          const __m256i vb01234567x0123 = _mm256_gf2p8affine_epi64_epi8(vbb01234567x01234567, vshl4, 0);
          const __m256i vb89ABCDEFx0123 = _mm256_gf2p8affine_epi64_epi8(vbb89ABCDEFx01234567, vshl4, 0);
        $else:
          const __m256i vb01234567x0123 = _mm256_slli_epi32(vbb01234567x01234567, 4);
          const __m256i vb89ABCDEFx0123 = _mm256_slli_epi32(vbb89ABCDEFx01234567, 4);
      $else:
        const __m256i vb01234567x0123 = _mm256_load_si256(w);
        const __m256i vb89ABCDEFx0123 = _mm256_load_si256((const __m256i*) ((const ${XINT8_T}*) w + 32));

      $for M in range(MR):
        vacc${M}x0123 = ${_MM256_DPBUSD_EPI32}(vacc${M}x0123, va${M}x01234567, vb01234567x0123);
        vacc${M}x4567 = ${_MM256_DPBUSD_EPI32}(vacc${M}x4567, va${M}x01234567, vb89ABCDEFx0123);
      $if PREFETCH:
        xnn_prefetch_to_l1((const ${XINT8_T}*) w + 960);

      w = (const ${XINT8_T}*) w + 64;
      k -= 8 * sizeof(${XINT8_T});
    }
    $if MR < 3:
      $for M in range(MR):
        vacc${M}x0123 = _mm256_add_epi32(vacc${M}x0123, vacc1x${M}x0123);
        vacc${M}x4567 = _mm256_add_epi32(vacc${M}x4567, vacc1x${M}x4567);

    // Add adjacent pairs
    $for M in range(MR):
      const __m256i vsum${M}x02134657 = _mm256_hadd_epi32(vacc${M}x0123, vacc${M}x4567);
      __m256i vacc${M}x01234567 = _mm256_permute4x64_epi64(vsum${M}x02134657, _MM_SHUFFLE(3, 1, 2, 0));

    $if DATATYPE == "QC4":
      $for M in range(MR):
        vacc${M}x01234567 = _mm256_srai_epi32(vacc${M}x01234567, 4);
    $for M in range(MR):
      __m256 vout${M}x01234567 = _mm256_cvtepi32_ps(vacc${M}x01234567);

    $if DATATYPE in ["QD8", "QC4"]:
      $for M in range(MR):
        vout${M}x01234567 = _mm256_mul_ps(vout${M}x01234567, _mm256_set1_ps(quantization_params[${M}].inv_scale));

      const __m256 vfilter_output_scale0123456789ABCDEF = _mm256_load_ps((const float*) w);
      const __m256 vbias0123456789ABCDEF = _mm256_load_ps((const float*) w + 8);
      w = (const float*) w + 16;

      $for M in range(MR):
        vout${M}x01234567 = _mm256_fmadd_ps(vout${M}x01234567, vfilter_output_scale0123456789ABCDEF, vbias0123456789ABCDEF);

      $for M in range(MR):
        vout${M}x01234567 = _mm256_max_ps(vout${M}x01234567, voutput_min);

      $for M in range(MR):
        vout${M}x01234567 = _mm256_min_ps(vout${M}x01234567, voutput_max);

      if(nc >= 8) {
        $for M in range(MR):
          _mm256_storeu_ps(c${M}, vout${M}x01234567);
          a${M} = (const int8_t*) ((uintptr_t) a${M} - kc);
          c${M} = (float*) ((uintptr_t) c${M} + cn_stride);
        nc -= 8;
      } else {
        $if AVX:
          $for M in range(MR):
            __m128 vout${M}x0123 = _mm256_castps256_ps128(vout${M}x01234567);
          if (nc & 4) {
            $for M in range(MR):
              _mm_storeu_ps(c${M}, vout${M}x0123);
              c${M} += 4;
            $for M in range(MR):
              vout${M}x0123 = _mm256_extractf128_ps(vout${M}x01234567, 1);
          }
          if (nc & 2) {
            $for M in range(MR):
              _mm_storel_pi((__m64*) c${M}, vout${M}x0123);
              c${M} += 2;
            $for M in range(MR):
              vout${M}x0123 = _mm_movehl_ps(vout${M}x0123, vout${M}x0123);
          }
          if (nc & 1) {
            $for M in range(MR):
              _mm_store_ss(c${M}, vout${M}x0123);
          }
        $else:
          // Prepare mask for valid 32-bit elements (depends on nc).
          const __mmask16 vmask = _cvtu32_mask16((UINT32_C(1) << nc) - 1);
          $for M in range(MR):
            _mm256_mask_storeu_ps(c${M}, vmask, vout${M}x01234567);
        nc = 0;
      }
    $else:
      $if DATATYPE == "QC8":
        const __m256 vscale012345678ABCDEF = _mm256_load_ps(w);
        w = (const float*) w + 8;
        $for M in range(MR):
          vout${M}x01234567 = _mm256_mul_ps(vout${M}x01234567, vscale012345678ABCDEF);
      $else:
        $for M in range(MR):
          vout${M}x01234567 = _mm256_mul_ps(vout${M}x01234567, vscale);

      $for M in range(MR):
        vout${M}x01234567 = _mm256_min_ps(vout${M}x01234567, voutput_max_less_zero_point);

      $for M in range(MR):
        vacc${M}x01234567 = _mm256_cvtps_epi32(vout${M}x01234567);

      $for M in range(MR):
        vacc${M}x01234567 = _mm256_add_epi32(vacc${M}x01234567, voutput_zero_point);

      $if AVX:
        $for M in range(MR):
          vacc${M}x01234567 = _mm256_packs_epi32(vacc${M}x01234567, _mm256_castsi128_si256(_mm256_extracti128_si256(vacc${M}x01234567, 1)));
          __m128i voutb${M}x01234567 = _mm256_castsi256_si128(_mm256_packs_epi16(vacc${M}x01234567, vacc${M}x01234567));
      $else:
        $for M in range(MR):
          __m128i voutb${M}x01234567 = ${_MM256_CVTXEPI32_EPI8}(vacc${M}x01234567);

      $for M in range(MR):
        voutb${M}x01234567 = ${_MM_MAX_EPX8}(voutb${M}x01234567, voutput_min);

      if (nc >= 8) {
        $for M in range(MR):
          _mm_storel_epi64((__m128i*) c${M}, voutb${M}x01234567);
          c${M} = (${OUT_T}*) ((uintptr_t) c${M} + cn_stride);
          a${M} = (const ${XINT8_T}*) ((uintptr_t) a${M} - kc);

        nc -= 8;
      } else {
        $if AVX:
          if (nc & 4) {
            $for M in range(MR):
              _mm_storeu_si32(c${M}, voutb${M}x01234567);
              c${M} += 4;
            $for M in range(MR):
              voutb${M}x01234567 = _mm_srli_epi64(voutb${M}x01234567, 32);
          }
          if (nc & 2) {
            $for M in range(MR):
              unaligned_store_u16(c${M}, (uint16_t) _mm_extract_epi16(voutb${M}x01234567, 0));
              c${M} += 2;
            $for M in range(MR):
              voutb${M}x01234567 = _mm_srli_epi32(voutb${M}x01234567, 16);
          }
          if (nc & 1) {
            $for M in range(MR):
              *c${M} = (${XINT8_T}) _mm_extract_epi8(voutb${M}x01234567, 0);
          }
        $else:
          // Prepare mask for valid 8-bit elements (depends on nc).
          const __mmask16 vmask = _cvtu32_mask16((UINT32_C(1) << nc) - UINT32_C(1));
          $for M in range(MR):
            _mm_mask_storeu_epi8(c${M}, vmask, voutb${M}x01234567);
        nc = 0;
      }
  } while (nc != 0);
}
